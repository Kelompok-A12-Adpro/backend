name: Staging CI/CD
env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:
  push:
    branches:
      - staging

permissions: read-all

jobs:
  # TODO: Add a job to run the tests
  
  # Database migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client (psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run SQL Dump
        run: |
          psql ${{ secrets.DATABASE_URL }} -f sql/dump.sql
          echo "Database schema update completed successfully."

  # SonarCloud analysis and linter
  sonarcloud-linter:
    name: SonarCloud analysis + Linter
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        run: rustup update stable

      - name: Install Protobuf
        run: |
          apt-get update
          apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install Clippy
        run: rustup component add clippy

      - name: Install cargo-sonar and run Clippy
        run: |
          cargo install cargo-sonar
          cargo clippy --message-format json > my-clippy-report.json
          cargo sonar --clippy --clippy-path my-clippy-report.json

      - name: Build with coverage
        run: |
          RUSTFLAGS="-C instrument-coverage" cargo build --features test-mode

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=sonar-issues.json
            -Dcommunity.rust.lcov.reportPaths=lcov.info
  
  # Codecov coverage report
  codecov:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update stable
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
  deploy:
    needs: [sonarcloud-linter, codecov]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
          -t gatherlove-be .
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        docker tag gatherlove-be:latest ${{ secrets.ECR_REGISTRY }}/gatherlove-be:latest
        docker push ${{ secrets.ECR_REGISTRY }}/gatherlove-be:latest

    - name: Deploy to ECS
      env:
        ECS_CLUSTER: GatherLove
        ECS_SERVICE: gatherlove-be
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}
        echo "Deployment to ECS completed successfully."
    
    - name: Get Public IP Address and Set to DuckDNS
      env:
          ECS_CLUSTER: GatherLove
          ECS_SERVICE: gatherlove-be
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text)
        TASK_DETAILS=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN)
        ENI=$(echo $TASK_DETAILS | jq -r '.tasks[0].attachments[0].details[] | select(.name=="networkInterfaceId").value')

        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        
        DUCKDNS_TOKEN=${{ secrets.DUCKDNS_TOKEN }}
        DUCKDNS_RESPONSE=$(curl -s "https://www.duckdns.org/update?domains=gatherlove-be&token=$DUCKDNS_TOKEN&ip=$PUBLIC_IP&verbose=true")

        echo "## DuckDNS Update Results" >> $GITHUB_STEP_SUMMARY
        echo "* Public IP: $PUBLIC_IP" >> $GITHUB_STEP_SUMMARY
        echo "* Response: $DUCKDNS_RESPONSE" >> $GITHUB_STEP_SUMMARY