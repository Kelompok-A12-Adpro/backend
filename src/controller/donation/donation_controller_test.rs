#[cfg(test)]
mod tests {
    use super::*; // To import controller functions and types from parent module
    use crate::model::donation::donation::{Donation, NewDonationRequest};
    // MockDonationServiceTrait is generated by mockall if you have #[cfg_attr(test, mockall::automock)]
    // on your DonationServiceTrait definition.
    use crate::service::donation::donation_service::DonationService;
    use crate::errors::AppError;
    use crate::auth::auth::AuthUser; //TODO: Change this to the real one later.

    use rocket::local::blocking::Client;
    use rocket::http::{Status, ContentType, Header};
    use rocket::serde::json::json; // For creating JSON payloads easily
    use std::sync::Arc;
    use chrono::Utc;

    // Helper to build a Rocket instance for testing with a mocked service
    fn create_test_rocket(mock_service: Arc<MockDonationServiceTrait>) -> rocket::Rocket<rocket::Build> {
        rocket::build()
            .mount("/api", routes()) // Assuming your routes are mounted under /api
            .manage(mock_service as Arc<dyn DonationServiceTrait>) // Manage the Arc-wrapped mock
    }

    // Helper to create a sample donation for expected results
    fn sample_donation(id: i32, user_id: i32, campaign_id: i32, amount: f64) -> Donation {
        Donation {
            id,
            user_id,
            campaign_id,
            amount,
            message: Some("Test donation".to_string()),
            created_at: Utc::now(),
        }
    }

    #[test]
    fn test_make_donation_success() {
        let mut mock_service = MockDonationServiceTrait::new();
        let expected_user_id = 123;
        let expected_campaign_id = 1;
        let expected_amount = 50.0;
        let returned_donation = sample_donation(1, expected_user_id, expected_campaign_id, expected_amount);

        mock_service
            .expect_make_donation()
            .withf(move |cmd| {
                cmd.donor_id == expected_user_id &&
                cmd.campaign_id == expected_campaign_id &&
                cmd.amount == expected_amount &&
                cmd.message == Some("Hope this helps!".to_string())
            })
            .times(1)
            .returning({
                let dk = returned_donation.clone();
                move |_| Ok(dk.clone())
            });

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client
            .post("/api/donations")
            .header(ContentType::JSON)
            .header(Header::new("X-User-Id", expected_user_id.to_string()))
            .json(&json!({
                "campaign_id": expected_campaign_id,
                "amount": expected_amount,
                "message": "Hope this helps!"
            }))
            .dispatch();

        assert_eq!(response.status(), Status::Created);
        assert!(response.headers().get_one("Location").is_some()); // Check for Location header
        let body = response.into_json::<Donation>().unwrap();
        assert_eq!(body.id, returned_donation.id);
        assert_eq!(body.amount, returned_donation.amount);
    }

    #[test]
    fn test_make_donation_service_validation_error() {
        let mut mock_service = MockDonationServiceTrait::new();
        mock_service
            .expect_make_donation() // Expect make_donation to be called
            .times(1)
            .returning(|_| Err(AppError::ValidationError("Amount too low".to_string())));

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client
            .post("/api/donations")
            .header(ContentType::JSON)
            .header(Header::new("X-User-Id", "123"))
            .json(&json!({ "campaign_id": 1, "amount": 0.0 })) // Data that would cause validation in service
            .dispatch();

        assert_eq!(response.status(), Status::BadRequest);
        let body = response.into_json::<serde_json::Value>().unwrap();
        assert_eq!(body["error"], "Amount too low");
    }

    #[test]
    fn test_make_donation_unauthorized_missing_header() {
        // No service calls are expected if auth fails
        let mock_service = MockDonationServiceTrait::new();
        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        
        let response = client
            .post("/api/donations")
            .header(ContentType::JSON)
            .json(&json!({ "campaign_id": 1, "amount": 50.0 })) // Missing X-User-Id
            .dispatch();

        assert_eq!(response.status(), Status::Unauthorized);
    }

    #[test]
    fn test_delete_donation_message_success() {
        let mut mock_service = MockDonationServiceTrait::new();
        let donation_id_to_delete = 1;
        let user_id_performing_delete = 123;

        mock_service
            .expect_delete_donation_message()
            .withf(move |cmd| cmd.donation_id == donation_id_to_delete && cmd.user_id == user_id_performing_delete)
            .times(1)
            .returning(|_| Ok(()));

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client
            .delete(format!("/api/donations/{}/message", donation_id_to_delete))
            .header(Header::new("X-User-Id", user_id_performing_delete.to_string()))
            .dispatch();

        assert_eq!(response.status(), Status::NoContent);
    }

    #[test]
    fn test_delete_donation_message_not_found() {
        let mut mock_service = MockDonationServiceTrait::new();
        mock_service
            .expect_delete_donation_message()
            .times(1)
            .returning(|_| Err(AppError::NotFound("Donation not found".to_string())));

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client
            .delete("/api/donations/99/message")
            .header(Header::new("X-User-Id", "123"))
            .dispatch();

        assert_eq!(response.status(), Status::NotFound);
        let body = response.into_json::<serde_json::Value>().unwrap();
        assert_eq!(body["error"], "Donation not found");
    }

    #[test]
    fn test_delete_donation_message_forbidden() {
        let mut mock_service = MockDonationServiceTrait::new();
        mock_service
            .expect_delete_donation_message()
            .times(1)
            .returning(|_| Err(AppError::Forbidden("User cannot delete this message".to_string())));

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client
            .delete("/api/donations/1/message") 
            .header(Header::new("X-User-Id", "456")) // Different user
            .dispatch();
        
        assert_eq!(response.status(), Status::Forbidden);
        let body = response.into_json::<serde_json::Value>().unwrap();
        assert_eq!(body["error"], "User cannot delete this message");
    }

    #[test]
    fn test_get_campaign_donations_success() {
        let mut mock_service = MockDonationServiceTrait::new();
        let campaign_id_to_query = 1;
        let donations_list = vec![
            sample_donation(1, 10, campaign_id_to_query, 100.0),
            sample_donation(2, 20, campaign_id_to_query, 200.0)
        ];
        
        mock_service
            .expect_get_donations_by_campaign()
            .withf(move |&cid| cid == campaign_id_to_query)
            .times(1)
            .returning({
                let dl = donations_list.clone();
                move |_| Ok(dl.clone())
            });

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client.get(format!("/api/campaigns/{}/donations", campaign_id_to_query)).dispatch();

        assert_eq!(response.status(), Status::Ok);
        let body = response.into_json::<Vec<Donation>>().unwrap();
        assert_eq!(body.len(), 2);
        assert_eq!(body[0].id, donations_list[0].id);
    }
    
    #[test]
    fn test_get_campaign_donations_empty_result() {
        let mut mock_service = MockDonationServiceTrait::new();
        let campaign_id_to_query = 2;
        mock_service
            .expect_get_donations_by_campaign()
            .withf(move |&cid| cid == campaign_id_to_query)
            .times(1)
            .returning(|_| Ok(vec![])); // Service returns an empty vector

        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client.get(format!("/api/campaigns/{}/donations", campaign_id_to_query)).dispatch();

        assert_eq!(response.status(), Status::Ok);
        let body = response.into_json::<Vec<Donation>>().unwrap();
        assert!(body.is_empty());
    }

    #[test]
    fn test_get_my_donations_success() {
        let mut mock_service = MockDonationServiceTrait::new();
        let user_id_querying = 123;
        let donations_list = vec![
            sample_donation(1, user_id_querying, 1, 100.0),
            sample_donation(2, user_id_querying, 2, 50.0)
        ];

        mock_service
            .expect_get_donations_by_user()
            .withf(move |&uid| uid == user_id_querying)
            .times(1)
            .returning({
                let dl = donations_list.clone();
                move |_| Ok(dl.clone())
            });
        
        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        let response = client
            .get("/api/donations/me")
            .header(Header::new("X-User-Id", user_id_querying.to_string()))
            .dispatch();

        assert_eq!(response.status(), Status::Ok);
        let body = response.into_json::<Vec<Donation>>().unwrap();
        assert_eq!(body.len(), 2);
        assert_eq!(body[0].user_id, user_id_querying);
    }
    
    #[test]
    fn test_get_my_donations_unauthorized_missing_header() {
        let mock_service = MockDonationServiceTrait::new(); // No calls expected
        let client = Client::tracked(create_test_rocket(Arc::new(mock_service))).expect("valid rocket instance");
        
        let response = client.get("/api/donations/me").dispatch(); // Missing X-User-Id
        assert_eq!(response.status(), Status::Unauthorized);
    }
}